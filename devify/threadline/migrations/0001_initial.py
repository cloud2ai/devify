# Generated by Django 5.1.4 on 2025-08-31 08:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Task Status')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('emails_processed', models.IntegerField(default=0, verbose_name='Emails Processed')),
                ('emails_created_issues', models.IntegerField(default=0, verbose_name='Issues Created')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_tasks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Email Task',
                'verbose_name_plural': 'Email Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.CharField(help_text='Unique email message ID', max_length=255, verbose_name='Message ID')),
                ('subject', models.CharField(max_length=500, verbose_name='Subject')),
                ('sender', models.CharField(help_text='Sender email address (supports RFC 5322 format)', max_length=500, verbose_name='Sender')),
                ('recipients', models.TextField(help_text='Comma-separated list of recipients', verbose_name='Recipients')),
                ('received_at', models.DateTimeField(verbose_name='Received At')),
                ('raw_content', models.TextField(help_text='Original email content', verbose_name='Raw Content')),
                ('html_content', models.TextField(blank=True, verbose_name='HTML Content')),
                ('text_content', models.TextField(blank=True, verbose_name='Text Content')),
                ('summary_title', models.CharField(blank=True, max_length=500, verbose_name='Summary Title')),
                ('summary_content', models.TextField(blank=True, verbose_name='Summary Content')),
                ('summary_priority', models.CharField(blank=True, max_length=20, verbose_name='Summary Priority')),
                ('llm_content', models.TextField(blank=True, help_text='Content organized by large language model', null=True, verbose_name='LLM Processed Content')),
                ('status', models.CharField(choices=[('fetched', 'Fetched'), ('ocr_processing', 'Ocr Processing'), ('ocr_success', 'Ocr Success'), ('ocr_failed', 'Ocr Failed'), ('llm_ocr_processing', 'Llm Ocr Processing'), ('llm_ocr_success', 'Llm Ocr Success'), ('llm_ocr_failed', 'Llm Ocr Failed'), ('llm_email_processing', 'Llm Email Processing'), ('llm_email_success', 'Llm Email Success'), ('llm_email_failed', 'Llm Email Failed'), ('llm_summary_processing', 'Llm Summary Processing'), ('llm_summary_success', 'Llm Summary Success'), ('llm_summary_failed', 'Llm Summary Failed'), ('issue_processing', 'Issue Processing'), ('issue_success', 'Issue Success'), ('issue_failed', 'Issue Failed'), ('completed', 'Completed')], db_index=True, default='fetched', max_length=32, verbose_name='Processing Status')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_messages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_messages', to='threadline.emailtask', verbose_name='Email Task')),
            ],
            options={
                'verbose_name': 'Email Message',
                'verbose_name_plural': 'Email Messages',
                'ordering': ['-received_at'],
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the issue', max_length=255, verbose_name='Issue Title')),
                ('description', models.TextField(help_text='Description of the issue', verbose_name='Issue Description')),
                ('priority', models.CharField(help_text='Priority level of the issue', max_length=20, verbose_name='Issue Priority')),
                ('engine', models.CharField(help_text='External system engine type', max_length=50, verbose_name='Engine Type')),
                ('external_id', models.CharField(blank=True, help_text='ID in external system', max_length=255, null=True, verbose_name='External ID')),
                ('issue_url', models.URLField(blank=True, help_text='Direct link to the issue in external system', max_length=500, null=True, verbose_name='Issue URL')),
                ('metadata', models.JSONField(default=dict, help_text='Engine-specific configuration and data', verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to='threadline.emailmessage', verbose_name='Email Message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issues', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Issue',
                'verbose_name_plural': 'Issues',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Configuration key name', max_length=100, verbose_name='Setting Key')),
                ('value', models.JSONField(help_text='Configuration value (JSON format)', verbose_name='Setting Value')),
                ('description', models.CharField(blank=True, help_text='Description of this setting', max_length=255, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this setting is active', verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
                'ordering': ['user', 'key'],
            },
        ),
        migrations.CreateModel(
            name='EmailAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='Original filename of the attachment', max_length=255, verbose_name='Filename')),
                ('safe_filename', models.CharField(help_text='Sanitized filename for safe storage', max_length=255, verbose_name='Safe Filename')),
                ('content_type', models.CharField(help_text='MIME type of the attachment', max_length=100, verbose_name='Content Type')),
                ('file_size', models.IntegerField(help_text='Size of the attachment in bytes', verbose_name='File Size')),
                ('file_path', models.CharField(help_text='Path to the stored attachment file', max_length=500, verbose_name='File Path')),
                ('is_image', models.BooleanField(default=False, help_text='Whether this attachment is an image', verbose_name='Is Image')),
                ('ocr_content', models.TextField(blank=True, help_text='Text content recognized from image attachment', null=True, verbose_name='OCR Content')),
                ('llm_content', models.TextField(blank=True, help_text='Content organized by large language model based on OCR result', null=True, verbose_name='LLM Processed Content')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('email_message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='threadline.emailmessage', verbose_name='Email Message')),
            ],
            options={
                'verbose_name': 'Email Attachment',
                'verbose_name_plural': 'Email Attachments',
                'ordering': ['filename'],
                'indexes': [models.Index(fields=['user', 'is_image'], name='threadline__user_id_5b7148_idx'), models.Index(fields=['email_message'], name='threadline__email_m_f7e222_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailtask',
            index=models.Index(fields=['user', 'status'], name='threadline__user_id_b8c431_idx'),
        ),
        migrations.AddIndex(
            model_name='emailtask',
            index=models.Index(fields=['created_at'], name='threadline__created_a3e95f_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['user', 'message_id'], name='threadline__user_id_087686_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['user', 'status'], name='threadline__user_id_55bcda_idx'),
        ),
        migrations.AddIndex(
            model_name='emailmessage',
            index=models.Index(fields=['received_at'], name='threadline__receive_fa9208_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emailmessage',
            unique_together={('user', 'message_id')},
        ),
        migrations.AddIndex(
            model_name='issue',
            index=models.Index(fields=['user', 'email_message'], name='threadline__user_id_54eccd_idx'),
        ),
        migrations.AddIndex(
            model_name='issue',
            index=models.Index(fields=['engine'], name='threadline__engine_a3bf24_idx'),
        ),
        migrations.AddIndex(
            model_name='issue',
            index=models.Index(fields=['external_id'], name='threadline__externa_1b3061_idx'),
        ),
        migrations.AddIndex(
            model_name='settings',
            index=models.Index(fields=['user', 'key'], name='threadline__user_id_c843dc_idx'),
        ),
        migrations.AddIndex(
            model_name='settings',
            index=models.Index(fields=['is_active'], name='threadline__is_acti_a3619c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='settings',
            unique_together={('user', 'key')},
        ),
    ]
